<anf>
  <!-- bloco de configuracoes globais -->
  <!-- a declaracao dos componentes deste bloco e' obrigatoria -->
  <globals>
    <!-- Parametros de desenho -->
    <!-- Valores para mode: "fill" , "line", "point" -->
    <!-- Valores para shading: "flat", "gouraud" ) -->
    <drawing mode="fill" shading="gouraud" background="0. 0. 1. 1." />

    <!-- Parametros de culling -->
    <!-- Valores para cullface: "none", "back" , "front" ou "both" -->
    <!-- Valores para cullorder : "ccw" ou "cw" -->
    <culling face="none" order="ccw" />

    <!-- Parametros de iluminacao; seguem os parametros do OpenGL  -->
    <lighting doublesided="false" local="true" enabled="true" ambient=".1 .1 .1 1." />

  </globals>

  <!-- bloco de camaras: o atributo "initial" identifica a camara/ponto de vista inicial, que tem de existir -->
  <cameras initial="camInit" >
    <!-- tem de existir, pelo menos uma camara dos tipos seguintes (perspective ou ortho) -->
    <!-- no caso da camara ortho, o atributo "direction" define o eixo segundo o qual se efetua a projecao -->

    <perspective id="idPer" near="0.2" far="0.3" angle="45" pos="25 55 22" target="44 54 65" />
    <ortho id="idOrtho" direction="ee" near="0.4" far="0.5" left="0.2" right="0.3" top="0.6" bottom="0.5" />
    <ortho id="idOrtho2" direction="ee" near="0.4" far="0.5" left="0.2" right="0.3" top="0.6" bottom="0.5" />

  </cameras>

  <!-- bloco de luzes -->
  <lights>
    <!-- Deve existir pelo menos uma luz declarada -->
    <!-- Atributo "marker" indica se deve ou nao desenhar-se uma esfera representativa -->
    <light id="omniLight" type="omni" enabled="true" marker="true" pos="1. 3. 1." >
      <component type="ambient" value="0. 0. 0. 1." />
      <component type="diffuse" value="1. 1. 1. 1." />
      <component type="specular" value="1. 1. 1. 1." />
    </light>

    <light id="spotLight" type="spot" enabled="true" marker="true" pos="5. 1. 2." target="0. 8. 0." angle="20" exponent="1" >
      <component type="ambient" value="7. 3. 3. 1." />
      <component type="diffuse" value="3. 0. 0. 1." />
      <component type="specular" value="3. 0. 0. 1." />
    </light>

  </lights>

  <!-- bloco de texturas. Este bloco tem de existir mas pode estar vazio, se nao forem usadas texturas -->
  <!--   ver topico 'Notas finais' no enunciado sobre os parametros texlength_... -->
  <textures>
    <texture id="ss" file="ss" texlength_s="ff" texlength_t="ff" />
  </textures>

  <!-- bloco de materiais; -->
  <appearances>
    <!-- deve existir um ou mais blocos "appearance" -->
    <!-- IMPORTANTE: -->
    <!--   textureref e opcional, a utilizar caso haja textura associada a esta aparencia -->
    <appearance id="ss" shininess="ff" textureref="ss" >
      <component type="ambient" value="ff ff ff ff" />
      <component type="diffuse" value="ff ff ff ff" />
      <component type="specular" value="ff ff ff ff" />
    </appearance>
  </appearances>

  <!-- bloco do grafo; "rootid" identifica o no de raiz -->
  <graph rootid="Prim">

    <!-- tem de existir, pelo menos, um bloco "node" -->
    <node id="Prim">
      <!-- bloco "transforms" obrigatorio -->
      <transforms>
        <!-- deve conter transformacoes explicitas usando as instrucoes seguintes sem limite nem ordem -->
        <!-- ex: bloco transforms pode ficar sem conteudo -->
        <!-- ex: bloco transforms pode ser R,T (nao tem S) -->
        <!-- ex: bloco transforms pode ser R,S,T,S -->
        <transform type="rotate" axis="xx" angle="45.0" />
      </transforms>

      <!-- declaracao da aparencia a utilizar -->
      <!-- se id="inherit", o no' mantem (herda) a aparencia do "pai" -->

      <appearanceref id="inherit" />


      <!-- conteudo do no; deve existir pelo menos um bloco "primitives" ou um "descendants" -->
      <!-- podem existir ambos -->

      <!-- bloco "primitives" -->
      <primitives>
        <!-- podem existir varias primitivas -->

        <!-- Primitivas : rectangle, triangle, cylinder, sphere, torus -->
        <!--   Comandos a serem interpretados genericamente como em OpenGL/GLUT, exceto -->
        <!--   o cilindro, que deve adicionalmente ter topos ou tampas) -->
        <rectangle xy1="5.0 0.0" xy2="6.0 1.0" />
        <!-- <triangle xyz1="1.0 2.0 3.0" xyz2="1.0 2.0 3.0" xyz3="1.0 3.0 3.0" />
        <cylinder base="1.0" top="2.0" height="3.0" slices="5" stacks="6" />-->
        <!-- deve ter topos -->
        <!--<sphere radius="2.0" slices="2" stacks="2" />
        <torus inner="1.0" outer="2.0" slices="5" loops="10" />-->
      </primitives>

      <!-- bloco "descendants" -->
      <descendants>
        <!-- Referencia a outros elementos do grafo -->
        <!-- (repetir o no. de vezes necessario) -->
        <!-- LEMBRANDO: qualquer no' pode ser referenciado previamente 'a sua declaracao; isto -->
        <!--            e', a ordem pela qual os nos sao declarados e' irrelevante -->

        <noderef id="ss" />

      </descendants>
    </node>
    <node id="ss">
      <!-- bloco "transforms" obrigatorio -->
      <transforms>
        <!-- deve conter transformacoes explicitas usando as instrucoes seguintes sem limite nem ordem -->
        <!-- ex: bloco transforms pode ficar sem conteudo -->
        <!-- ex: bloco transforms pode ser R,T (nao tem S) -->
        <!-- ex: bloco transforms pode ser R,S,T,S -->
        <transform type="translate" to="00 00 05" />
      </transforms>

      <!-- declaracao da aparencia a utilizar -->
      <!-- se id="inherit", o no' mantem (herda) a aparencia do "pai" -->

      <appearanceref id="inherit" />


      <!-- conteudo do no; deve existir pelo menos um bloco "primitives" ou um "descendants" -->
      <!-- podem existir ambos -->

      <!-- bloco "primitives" -->
      <primitives>
        <!-- podem existir varias primitivas -->

        <!-- Primitivas : rectangle, triangle, cylinder, sphere, torus -->
        <!--   Comandos a serem interpretados genericamente como em OpenGL/GLUT, exceto -->
        <!--   o cilindro, que deve adicionalmente ter topos ou tampas) -->
        <torus inner="1.0" outer="2.0" slices="16" loops="16" />
      </primitives>

      <!-- bloco "descendants" -->
      <descendants>
        <!-- Referencia a outros elementos do grafo -->
        <!-- (repetir o no. de vezes necessario) -->
        <!-- LEMBRANDO: qualquer no' pode ser referenciado previamente 'a sua declaracao; isto -->
        <!--            e', a ordem pela qual os nos sao declarados e' irrelevante -->
      </descendants>
    </node>
  </graph>
</anf>